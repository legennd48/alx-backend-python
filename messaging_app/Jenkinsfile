pipeline {
    agent any

    environment {
        VENV_DIR = '.venv'
        DOCKER_IMAGE = 'messaging_app-messaging-app'
        DOCKER_TAG = 'latest'
        DOCKER_REGISTRY = 'legennd48'
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'github_cred',
                    url: 'https://github.com/legennd48/alx-backend-python.git',
                    git branch: 'master'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'python3 -m venv .venv'
                sh '. .venv/bin/activate && pip install --upgrade pip'
                sh '. .venv/bin/activate && pip install -r messaging_app/requirements.txt'
            }
        }

        stage('Run Tests') {
            steps {
                sh '. .venv/bin/activate && cd messaging_app && pytest --junitxml=../report.xml'
            }
        }

        stage('Generate Test Report') {
            steps {
                junit 'report.xml'
            }
        }

        stage('Build Message App Docker Image') {
            steps {
                sh '''
                    cd messaging_app
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh '''
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''
                }
            }
        }
    }

    post {
        always {
            sh '''
                docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                docker rmi ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG} || true
            '''
            cleanWs()
        }
        failure {
            echo '❌ Messaging App Pipeline Failed! Check the logs above for details.'
        }
        success {
            echo '✅ Messaging App Pipeline Completed Successfully! Tests passed and Docker image pushed to registry.'
        }
    }
}