#!/bin/bash

# Rolling Update Script for Django Messaging App
# This script demonstrates zero-downtime rolling updates by:
# 1. Applying updated deployment configuration
# 2. Monitoring rollout progress
# 3. Continuously testing application availability during update
# 4. Verifying the update completion

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE=${NAMESPACE:-default}
DEPLOYMENT_NAME="django-messaging-app-blue"
SERVICE_NAME="django-messaging-service"
DEPLOYMENT_FILE="blue_deployment.yaml"
TEST_ENDPOINT="/admin/"
CURL_TIMEOUT=5
TEST_INTERVAL=2
MAX_ROLLOUT_TIMEOUT=300  # 5 minutes

# Print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_test() {
    echo -e "${CYAN}[TEST]${NC} $1"
}

# Check if required commands exist
check_dependencies() {
    local missing_deps=()
    
    for cmd in kubectl curl; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        print_error "Please install the missing commands and try again."
        exit 1
    fi
    
    print_success "All required dependencies are available"
}

# Get service endpoint for testing
get_service_endpoint() {
    local service_ip=$(kubectl get service "$SERVICE_NAME" -n "$NAMESPACE" -o jsonpath='{.spec.clusterIP}' 2>/dev/null)
    local service_port=$(kubectl get service "$SERVICE_NAME" -n "$NAMESPACE" -o jsonpath='{.spec.ports[0].port}' 2>/dev/null)
    
    if [ -z "$service_ip" ] || [ -z "$service_port" ]; then
        print_error "Could not get service endpoint for $SERVICE_NAME"
        return 1
    fi
    
    echo "http://$service_ip:$service_port"
}

# Test application availability
test_application() {
    local endpoint="$1"
    local timeout="$2"
    
    # Use kubectl run with curl to test from within the cluster
    local test_pod_name="curl-test-$(date +%s)"
    
    if kubectl run "$test_pod_name" \
        --image=curlimages/curl \
        --rm -i --restart=Never \
        --timeout="${timeout}s" \
        --quiet \
        -- curl -s -f --max-time "$timeout" "${endpoint}${TEST_ENDPOINT}" > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Continuous availability testing during rollout
continuous_availability_test() {
    local endpoint="$1"
    local duration="$2"
    local success_count=0
    local failure_count=0
    local total_tests=0
    local start_time=$(date +%s)
    local end_time=$((start_time + duration))
    
    print_info "Starting continuous availability testing for ${duration} seconds..."
    print_test "Testing endpoint: ${endpoint}${TEST_ENDPOINT}"
    
    # Start background monitoring
    while [ $(date +%s) -lt $end_time ]; do
        total_tests=$((total_tests + 1))
        
        if test_application "$endpoint" "$CURL_TIMEOUT"; then
            success_count=$((success_count + 1))
            echo -n "✓"
        else
            failure_count=$((failure_count + 1))
            echo -n "✗"
        fi
        
        # Print progress every 10 tests
        if [ $((total_tests % 10)) -eq 0 ]; then
            echo " [${total_tests} tests]"
        fi
        
        sleep "$TEST_INTERVAL"
    done
    
    echo  # New line after progress indicators
    
    local success_rate=$((success_count * 100 / total_tests))
    
    print_test "Availability Test Results:"
    print_test "  Total tests: $total_tests"
    print_test "  Successful: $success_count"
    print_test "  Failed: $failure_count"
    print_test "  Success rate: ${success_rate}%"
    
    if [ $success_rate -ge 90 ]; then
        print_success "Excellent availability during update (${success_rate}%)"
    elif [ $success_rate -ge 75 ]; then
        print_warning "Good availability during update (${success_rate}%)"
    else
        print_error "Poor availability during update (${success_rate}%)"
    fi
    
    return $failure_count
}

# Show current deployment status
show_deployment_status() {
    print_info "Current deployment status:"
    
    # Show deployment details
    echo
    kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o wide 2>/dev/null || print_warning "Deployment not found"
    
    # Show pods
    echo
    print_info "Current pods:"
    kubectl get pods -l "app=django-messaging-app" -n "$NAMESPACE" -o wide 2>/dev/null || print_warning "No pods found"
    
    # Show rollout history
    echo
    print_info "Rollout history:"
    kubectl rollout history deployment/"$DEPLOYMENT_NAME" -n "$NAMESPACE" 2>/dev/null || print_warning "No rollout history"
}

# Monitor rollout progress
monitor_rollout() {
    local deployment_name="$1"
    local timeout="$2"
    
    print_info "Monitoring rollout progress for deployment: $deployment_name"
    print_info "Timeout: ${timeout} seconds"
    
    # Start rollout status monitoring in background
    {
        kubectl rollout status deployment/"$deployment_name" -n "$NAMESPACE" --timeout="${timeout}s"
        echo $? > /tmp/rollout_exit_code
    } &
    
    local rollout_pid=$!
    local start_time=$(date +%s)
    
    # Monitor pod changes during rollout
    print_info "Watching pod changes during rollout..."
    while kill -0 $rollout_pid 2>/dev/null; do
        echo "--- $(date) ---"
        kubectl get pods -l "app=django-messaging-app" -n "$NAMESPACE" -o custom-columns=NAME:.metadata.name,STATUS:.status.phase,READY:.status.containerStatuses[0].ready,RESTARTS:.status.containerStatuses[0].restartCount,AGE:.metadata.creationTimestamp 2>/dev/null || echo "No pods found"
        
        sleep 10
    done
    
    # Get rollout result
    wait $rollout_pid
    local rollout_exit_code=$(cat /tmp/rollout_exit_code 2>/dev/null || echo "1")
    rm -f /tmp/rollout_exit_code
    
    if [ "$rollout_exit_code" -eq 0 ]; then
        print_success "Rollout completed successfully"
        return 0
    else
        print_error "Rollout failed or timed out"
        return 1
    fi
}

# Verify rollout completion
verify_rollout_completion() {
    print_info "Verifying rollout completion..."
    
    # Check deployment status
    local desired_replicas=$(kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o jsonpath='{.spec.replicas}' 2>/dev/null)
    local ready_replicas=$(kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o jsonpath='{.status.readyReplicas}' 2>/dev/null)
    local updated_replicas=$(kubectl get deployment "$DEPLOYMENT_NAME" -n "$NAMESPACE" -o jsonpath='{.status.updatedReplicas}' 2>/dev/null)
    
    print_info "Deployment replica status:"
    print_info "  Desired: $desired_replicas"
    print_info "  Ready: $ready_replicas"
    print_info "  Updated: $updated_replicas"
    
    if [ "$desired_replicas" = "$ready_replicas" ] && [ "$desired_replicas" = "$updated_replicas" ]; then
        print_success "All replicas are updated and ready"
    else
        print_warning "Not all replicas are updated and ready"
        return 1
    fi
    
    # Check pod images
    echo
    print_info "Verifying pod images:"
    kubectl get pods -l "app=django-messaging-app" -n "$NAMESPACE" -o custom-columns=NAME:.metadata.name,IMAGE:.spec.containers[0].image,STATUS:.status.phase 2>/dev/null
    
    # Final application test
    echo
    print_info "Final application health check..."
    local endpoint=$(get_service_endpoint)
    if [ $? -eq 0 ]; then
        if test_application "$endpoint" 10; then
            print_success "Application is responding correctly after update"
        else
            print_error "Application is not responding correctly after update"
            return 1
        fi
    else
        print_error "Could not get service endpoint for final test"
        return 1
    fi
    
    return 0
}

# Main rolling update process
perform_rolling_update() {
    print_info "Starting rolling update process..."
    
    # Check if deployment file exists
    if [ ! -f "$DEPLOYMENT_FILE" ]; then
        print_error "Deployment file $DEPLOYMENT_FILE not found"
        exit 1
    fi
    
    # Show initial status
    print_info "Initial deployment status:"
    show_deployment_status
    
    # Get service endpoint for testing
    local endpoint=$(get_service_endpoint)
    if [ $? -ne 0 ]; then
        print_error "Cannot proceed without service endpoint"
        exit 1
    fi
    
    print_success "Service endpoint: $endpoint"
    
    # Test initial application availability
    print_info "Testing initial application availability..."
    if test_application "$endpoint" 10; then
        print_success "Application is initially healthy"
    else
        print_error "Application is not healthy before update"
        exit 1
    fi
    
    # Apply the updated deployment
    print_info "Applying updated deployment configuration..."
    kubectl apply -f "$DEPLOYMENT_FILE" -n "$NAMESPACE"
    
    if [ $? -eq 0 ]; then
        print_success "Deployment configuration applied successfully"
    else
        print_error "Failed to apply deployment configuration"
        exit 1
    fi
    
    # Start continuous testing in background
    print_info "Starting continuous availability testing..."
    continuous_availability_test "$endpoint" 120 &
    local test_pid=$!
    
    # Monitor rollout progress
    if monitor_rollout "$DEPLOYMENT_NAME" "$MAX_ROLLOUT_TIMEOUT"; then
        print_success "Rollout monitoring completed successfully"
    else
        print_error "Rollout monitoring failed"
        kill $test_pid 2>/dev/null || true
        wait $test_pid 2>/dev/null || true
        exit 1
    fi
    
    # Wait for continuous testing to complete
    print_info "Waiting for continuous testing to complete..."
    wait $test_pid
    local test_result=$?
    
    # Verify rollout completion
    if verify_rollout_completion; then
        print_success "Rolling update completed successfully!"
    else
        print_error "Rolling update verification failed"
        exit 1
    fi
    
    # Show final status
    echo
    print_info "Final deployment status:"
    show_deployment_status
    
    if [ $test_result -eq 0 ]; then
        print_success "✅ Rolling update completed with zero downtime!"
    else
        print_warning "⚠️  Rolling update completed but some availability issues were detected"
    fi
}

# Rollback function
rollback_deployment() {
    print_warning "Rolling back deployment..."
    
    kubectl rollout undo deployment/"$DEPLOYMENT_NAME" -n "$NAMESPACE"
    
    if [ $? -eq 0 ]; then
        print_info "Rollback initiated, monitoring progress..."
        monitor_rollout "$DEPLOYMENT_NAME" 180
        verify_rollout_completion
    else
        print_error "Failed to initiate rollback"
        exit 1
    fi
}

# Usage information
usage() {
    echo "Usage: $0 {update|status|rollback|test|help}"
    echo
    echo "Commands:"
    echo "  update    - Perform rolling update with continuous availability testing"
    echo "  status    - Show current deployment status"
    echo "  rollback  - Rollback to previous deployment version"
    echo "  test      - Test application availability"
    echo "  help      - Show this help message"
    echo
    echo "Environment Variables:"
    echo "  NAMESPACE - Kubernetes namespace (default: default)"
    echo
    echo "Examples:"
    echo "  $0 update    # Perform rolling update"
    echo "  $0 status    # Check current status"
    echo "  $0 rollback  # Rollback to previous version"
}

# Main execution
main() {
    local command=${1:-update}
    
    case $command in
        update)
            check_dependencies
            perform_rolling_update
            ;;
        status)
            show_deployment_status
            ;;
        rollback)
            check_dependencies
            rollback_deployment
            ;;
        test)
            check_dependencies
            local endpoint=$(get_service_endpoint)
            if [ $? -eq 0 ]; then
                print_info "Testing application at: $endpoint"
                if test_application "$endpoint" 10; then
                    print_success "Application test passed"
                else
                    print_error "Application test failed"
                    exit 1
                fi
            else
                exit 1
            fi
            ;;
        help|--help|-h)
            usage
            ;;
        *)
            print_error "Unknown command: $command"
            usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
